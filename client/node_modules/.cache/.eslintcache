[{"/Users/aleksandarvasiljevic/git/Cosuno/client/src/index.js":"1","/Users/aleksandarvasiljevic/git/Cosuno/client/src/views/Dashboard.tsx":"2","/Users/aleksandarvasiljevic/git/Cosuno/client/src/views/Header.tsx":"3","/Users/aleksandarvasiljevic/git/Cosuno/client/src/App.tsx":"4","/Users/aleksandarvasiljevic/git/Cosuno/client/src/views/Login.tsx":"5","/Users/aleksandarvasiljevic/git/Cosuno/client/src/resources.ts":"6","/Users/aleksandarvasiljevic/git/Cosuno/client/src/views/Register.tsx":"7","/Users/aleksandarvasiljevic/git/Cosuno/client/src/views/CompanyForm.tsx":"8","/Users/aleksandarvasiljevic/git/Cosuno/client/src/utils/Button.tsx":"9","/Users/aleksandarvasiljevic/git/Cosuno/client/src/utils/Dropdown.tsx":"10","/Users/aleksandarvasiljevic/git/Cosuno/client/src/utils/constants.ts":"11","/Users/aleksandarvasiljevic/git/Cosuno/client/src/utils/TextInput.tsx":"12","/Users/aleksandarvasiljevic/github/Cosuno/client/src/index.js":"13","/Users/aleksandarvasiljevic/github/Cosuno/client/src/App.tsx":"14","/Users/aleksandarvasiljevic/github/Cosuno/client/src/resources.ts":"15","/Users/aleksandarvasiljevic/github/Cosuno/client/src/views/Header.tsx":"16","/Users/aleksandarvasiljevic/github/Cosuno/client/src/views/CompanyForm.tsx":"17","/Users/aleksandarvasiljevic/github/Cosuno/client/src/views/Dashboard.tsx":"18","/Users/aleksandarvasiljevic/github/Cosuno/client/src/views/Login.tsx":"19","/Users/aleksandarvasiljevic/github/Cosuno/client/src/utils/Button.tsx":"20","/Users/aleksandarvasiljevic/github/Cosuno/client/src/views/Register.tsx":"21","/Users/aleksandarvasiljevic/github/Cosuno/client/src/utils/Dropdown.tsx":"22","/Users/aleksandarvasiljevic/github/Cosuno/client/src/utils/constants.ts":"23","/Users/aleksandarvasiljevic/github/Cosuno/client/src/utils/TextInput.tsx":"24"},{"size":288,"mtime":1655906997948,"results":"25","hashOfConfig":"26"},{"size":4297,"mtime":1655923205691,"results":"27","hashOfConfig":"26"},{"size":3385,"mtime":1655921280127,"results":"28","hashOfConfig":"26"},{"size":1537,"mtime":1655923240853,"results":"29","hashOfConfig":"26"},{"size":3668,"mtime":1655922696147,"results":"30","hashOfConfig":"26"},{"size":828,"mtime":1655897385184,"results":"31","hashOfConfig":"26"},{"size":5085,"mtime":1655921725934,"results":"32","hashOfConfig":"26"},{"size":4415,"mtime":1655922265473,"results":"33","hashOfConfig":"26"},{"size":1483,"mtime":1655908104668,"results":"34","hashOfConfig":"26"},{"size":6405,"mtime":1655923196577,"results":"35","hashOfConfig":"26"},{"size":663,"mtime":1655920472717,"results":"36","hashOfConfig":"26"},{"size":1254,"mtime":1655917276544,"results":"37","hashOfConfig":"26"},{"size":288,"mtime":1655906997948,"results":"38","hashOfConfig":"39"},{"size":1537,"mtime":1655923240853,"results":"40","hashOfConfig":"39"},{"size":828,"mtime":1655897385184,"results":"41","hashOfConfig":"39"},{"size":3385,"mtime":1655921280127,"results":"42","hashOfConfig":"39"},{"size":4415,"mtime":1655922265473,"results":"43","hashOfConfig":"39"},{"size":4297,"mtime":1655923205691,"results":"44","hashOfConfig":"39"},{"size":3621,"mtime":1655926420497,"results":"45","hashOfConfig":"39"},{"size":1483,"mtime":1655908104668,"results":"46","hashOfConfig":"39"},{"size":5085,"mtime":1655921725934,"results":"47","hashOfConfig":"39"},{"size":6405,"mtime":1655923196577,"results":"48","hashOfConfig":"39"},{"size":663,"mtime":1655920472717,"results":"49","hashOfConfig":"39"},{"size":1254,"mtime":1655917276544,"results":"50","hashOfConfig":"39"},{"filePath":"51","messages":"52","suppressedMessages":"53","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"54"},"vknh80",{"filePath":"55","messages":"56","suppressedMessages":"57","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"58","usedDeprecatedRules":"59"},{"filePath":"60","messages":"61","suppressedMessages":"62","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"63","messages":"64","suppressedMessages":"65","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"66","messages":"67","suppressedMessages":"68","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"69","usedDeprecatedRules":"59"},{"filePath":"70","messages":"71","suppressedMessages":"72","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"73","messages":"74","suppressedMessages":"75","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"59"},{"filePath":"76","messages":"77","suppressedMessages":"78","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"59"},{"filePath":"79","messages":"80","suppressedMessages":"81","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"59"},{"filePath":"82","messages":"83","suppressedMessages":"84","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"85","messages":"86","suppressedMessages":"87","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"88","messages":"89","suppressedMessages":"90","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"91","messages":"92","suppressedMessages":"93","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"1nlvm7r",{"filePath":"94","messages":"95","suppressedMessages":"96","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"97","messages":"98","suppressedMessages":"99","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"100","messages":"101","suppressedMessages":"102","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"103","messages":"104","suppressedMessages":"105","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"106","messages":"107","suppressedMessages":"108","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"58"},{"filePath":"109","messages":"110","suppressedMessages":"111","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"112","messages":"113","suppressedMessages":"114","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"115","messages":"116","suppressedMessages":"117","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"118","messages":"119","suppressedMessages":"120","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"121","messages":"122","suppressedMessages":"123","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"124","messages":"125","suppressedMessages":"126","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"/Users/aleksandarvasiljevic/git/Cosuno/client/src/index.js",[],[],[],"/Users/aleksandarvasiljevic/git/Cosuno/client/src/views/Dashboard.tsx",["127"],[],"import React, { useState } from 'react';\nimport { classes, stylesheet } from 'typestyle';\nimport { Dropdown } from '../utils/Dropdown';\nimport { BORDER_INACTIVE, SUBTLE_WHITE } from '../utils/constants';\nimport { TextInput } from '../utils/TextInput';\n\nconst styles = stylesheet({\n    dashboardPage: {\n        display: 'flex',\n    },\n    dashboardList: {\n        display: 'flex',\n        width: '75%',\n        flexDirection: 'column',\n        fontSize: '1.5rem',\n        border: `1px solid ${BORDER_INACTIVE}`,\n        borderRadius: '4px',\n        padding: '1rem',\n        marginRight: '.5rem',\n        $nest: {\n            '& > *': {\n                padding: '0.5rem',\n            },\n        },\n    },\n    header: {\n        fontSize: '1rem',\n        $nest: {\n            '& > *:first-child': {\n                marginLeft: '1rem',\n            },\n        },\n    },\n    company: {},\n    gridLayout: {\n        display: 'grid',\n        gridTemplateColumns: 'repeat(4, 1fr) ',\n        alignItems: 'center',\n    },\n    filters: {\n        display: 'flex',\n        marginLeft: 'auto',\n        $nest: {\n            '& > *:first-child': {\n                marginRight: '.5rem',\n            },\n        },\n    },\n    input: {\n        display: 'block',\n        height: '1rem',\n        minWidth: '4rem',\n        border: `1px solid ${BORDER_INACTIVE}`,\n        borderRadius: 4,\n        padding: '0.5rem',\n        color: 'black',\n        $nest: {\n            '&::placeholder': {\n                // borderColor: BORDER_INACTIVE,\n            },\n            '&:hover': {\n                backgroundColor: SUBTLE_WHITE,\n            },\n            '&:focus': {\n                borderWidth: 2,\n                borderColor: 'blue',\n                outline: `none`,\n            },\n        },\n    },\n});\n\ntype DashboardProps = {\n    companies: { name: string; city: string; speciality: string }[] | undefined;\n};\n\nexport function Dashboard({ companies }: DashboardProps) {\n    const specialities = ['Excavation', 'Plumbing', 'Electrical', 'Sewage', 'Demolish'];\n    //todo add a spinner\n    const [searchInput, setSearchInput] = useState('');\n    const [selectedFilter, setSelectedFilter] = useState('');\n\n    if (!companies) return <div>Spinner spins</div>;\n\n    if (companies.length === 0) return <div>No companies</div>;\n\n    console.log();\n\n    return (\n        <div className={styles.dashboardPage}>\n            <div className={styles.dashboardList}>\n                <header className={classes(styles.gridLayout, styles.header)}>\n                    <span></span>\n                    <span>Name</span>\n                    <span>City</span>\n                    <span>Speciality</span>\n                </header>\n                {companies\n                    .filter((company) =>\n                        company.name.toLocaleLowerCase().includes(searchInput.toLocaleLowerCase())\n                    )\n                    .filter((company) =>\n                        company.speciality\n                            .toLocaleLowerCase()\n                            .includes(selectedFilter.toLocaleLowerCase())\n                    )\n                    .map((company, i) => {\n                        return (\n                            <div key={company.name} className={styles.gridLayout}>\n                                <img\n                                    src={`https://lorempokemon.fakerapi.it/pokemon/100/${i}`}\n                                    alt={'image placeholder'}\n                                />\n                                <span>{company.name}</span>\n                                <span>{company.city}</span>\n                                <span>{company.speciality}</span>\n                            </div>\n                        );\n                    })}\n            </div>\n            <div className={styles.filters}>\n                <TextInput\n                    placeholder={'Filter companies'}\n                    value={searchInput}\n                    setValue={setSearchInput}\n                />\n                <Dropdown\n                    items={specialities}\n                    selectedFilter={selectedFilter}\n                    setSelectedFilter={setSelectedFilter}\n                    title={'Select filter'}\n                />\n            </div>\n        </div>\n    );\n}\n",[],"/Users/aleksandarvasiljevic/git/Cosuno/client/src/views/Header.tsx",[],[],"/Users/aleksandarvasiljevic/git/Cosuno/client/src/App.tsx",[],[],"/Users/aleksandarvasiljevic/git/Cosuno/client/src/views/Login.tsx",["128"],[],"import { useState, FormEvent } from 'react';\nimport { toast } from 'react-toastify';\nimport React from 'react';\nimport { login } from '../resources';\nimport { AxiosErrorWithMessage } from './common';\nimport { useNavigate } from 'react-router-dom';\nimport { Button } from '../utils/Button';\nimport { classes, stylesheet } from 'typestyle';\nimport { INPUT_FIELD } from '../utils/constants';\n\nconst styles = stylesheet({\n    loginForm: {\n        $nest: {\n            '& > *': {\n                padding: '0.2rem',\n            },\n        },\n    },\n    inputField: {\n        width: '10rem',\n    },\n    buttons: {\n        display: 'flex',\n        $nest: {\n            '& > *:first-child': {\n                marginRight: '.5rem',\n            },\n        },\n    },\n});\n\ntype LoginProps = {\n    setUser: (user: { name: string } | null) => void;\n    setShowLogin: () => void;\n};\nexport function Login({ setUser, setShowLogin }: LoginProps) {\n    const [{ email, password }, setFormData] = useState({\n        email: '',\n        password: '',\n    });\n\n    const onChange = (e: React.ChangeEvent<HTMLInputElement>) => {\n        setFormData((prevState) => ({\n            ...prevState,\n            [e.target.name]: e.target.value,\n        }));\n    };\n\n    const onSubmit = async (e: FormEvent) => {\n        e.preventDefault();\n        try {\n            const response = await login({ loginData: { email, password } });\n            localStorage.setItem('user', JSON.stringify(response.data));\n            setUser(response.data);\n            setShowLogin();\n            toast('Welcome ' + response.data.name, {\n                position: 'top-center',\n                autoClose: 1500,\n                closeOnClick: true,\n                hideProgressBar: true,\n            });\n        } catch (e) {\n            const error = e as AxiosErrorWithMessage;\n            toast.error(error.response.data.message, {\n                position: 'top-right',\n                autoClose: 1500,\n                closeOnClick: true,\n                hideProgressBar: true,\n            });\n        }\n    };\n\n    return (\n        <>\n            <section className=\"form\">\n                <form onSubmit={onSubmit} className={styles.loginForm}>\n                    <div className=\"form-group\">\n                        <input\n                            type=\"email\"\n                            id=\"email\"\n                            name=\"email\"\n                            value={email}\n                            placeholder=\"Enter your email\"\n                            onChange={onChange}\n                            className={classes(INPUT_FIELD, styles.inputField)}\n                        />\n                    </div>\n                    <div className=\"form-group\">\n                        <input\n                            type=\"password\"\n                            id=\"password\"\n                            name=\"password\"\n                            value={password}\n                            placeholder=\"Enter password\"\n                            onChange={onChange}\n                            className={classes(INPUT_FIELD, styles.inputField)}\n                        />\n                    </div>\n\n                    <div className={styles.buttons}>\n                        <Button type=\"submit\" title={'Submit'} />\n                        <Button\n                            type={'button'}\n                            onClick={() => {\n                                setShowLogin();\n                            }}\n                            title={'Cancel'}\n                        />\n                    </div>\n                </form>\n            </section>\n        </>\n    );\n}\n","/Users/aleksandarvasiljevic/git/Cosuno/client/src/resources.ts",[],[],"/Users/aleksandarvasiljevic/git/Cosuno/client/src/views/Register.tsx",[],[],"/Users/aleksandarvasiljevic/git/Cosuno/client/src/views/CompanyForm.tsx",[],[],"/Users/aleksandarvasiljevic/git/Cosuno/client/src/utils/Button.tsx",[],[],"/Users/aleksandarvasiljevic/git/Cosuno/client/src/utils/Dropdown.tsx",[],[],"/Users/aleksandarvasiljevic/git/Cosuno/client/src/utils/constants.ts",[],[],"/Users/aleksandarvasiljevic/git/Cosuno/client/src/utils/TextInput.tsx",[],[],"/Users/aleksandarvasiljevic/github/Cosuno/client/src/index.js",[],[],"/Users/aleksandarvasiljevic/github/Cosuno/client/src/App.tsx",[],[],"/Users/aleksandarvasiljevic/github/Cosuno/client/src/resources.ts",[],[],"/Users/aleksandarvasiljevic/github/Cosuno/client/src/views/Header.tsx",[],[],"/Users/aleksandarvasiljevic/github/Cosuno/client/src/views/CompanyForm.tsx",[],[],"/Users/aleksandarvasiljevic/github/Cosuno/client/src/views/Dashboard.tsx",["129"],[],"/Users/aleksandarvasiljevic/github/Cosuno/client/src/views/Login.tsx",[],[],"/Users/aleksandarvasiljevic/github/Cosuno/client/src/utils/Button.tsx",[],[],"/Users/aleksandarvasiljevic/github/Cosuno/client/src/views/Register.tsx",[],[],"/Users/aleksandarvasiljevic/github/Cosuno/client/src/utils/Dropdown.tsx",[],[],"/Users/aleksandarvasiljevic/github/Cosuno/client/src/utils/constants.ts",[],[],"/Users/aleksandarvasiljevic/github/Cosuno/client/src/utils/TextInput.tsx",[],[],{"ruleId":"130","severity":1,"message":"131","line":110,"column":33,"nodeType":"132","endLine":113,"endColumn":35},{"ruleId":"133","severity":1,"message":"134","line":6,"column":10,"nodeType":"135","messageId":"136","endLine":6,"endColumn":21},{"ruleId":"130","severity":1,"message":"131","line":110,"column":33,"nodeType":"132","endLine":113,"endColumn":35},"jsx-a11y/img-redundant-alt","Redundant alt attribute. Screen-readers already announce `img` tags as an image. You don’t need to use the words `image`, `photo,` or `picture` (or any specified custom words) in the alt prop.","JSXOpeningElement","@typescript-eslint/no-unused-vars","'useNavigate' is defined but never used.","Identifier","unusedVar"]